
===== N MODE =====
<CR>       → m`o<Esc>``           | no description                 | Vim script
<Esc>      → <Cmd>nohlsearch<CR>  | no description                 | Vim script
 sn        →                      | [S]earch [N]eovim files        | Lua callback
 s/        →                      | [S]earch [/] in Open Files     | Lua callback
 /         →                      | [/] Fuzzily search in current buffer | Lua callback
           →                      | [ ] Find existing buffers      | Lua callback
 s.        →                      | [S]earch Recent Files ("." for repeat) | Lua callback
 sr        →                      | [S]earch [R]esume              | Lua callback
 sd        →                      | [S]earch [D]iagnostics         | Lua callback
 sg        →                      | [S]earch by [G]rep             | Lua callback
 sw        →                      | [S]earch current [W]ord        | Lua callback
 ss        →                      | [S]earch [S]elect Telescope    | Lua callback
 sf        →                      | [S]earch [F]iles               | Lua callback
 sk        →                      | [S]earch [K]eymaps             | Lua callback
 sh        →                      | [S]earch [H]elp                | Lua callback
 cb        →                      | Comment toggle current block   | Lua callback
 cc        →                      | Comment toggle current line    | Lua callback
 rr        →                      | Replace in files (Spectre)     | Lua callback
 rcn       →                      | Replace next surrounding       | Lua callback
 rdn       →                      | Delete next surrounding        | Lua callback
 rcl       →                      | Replace previous surrounding   | Lua callback
 rdl       →                      | Delete previous surrounding    | Lua callback
 rc        →                      | Replace surrounding            | Lua callback
 rd        →                      | Delete surrounding             | Lua callback
 ra        →                      | Add surrounding                | Lua callback
 gg        →                      | LazyGit                        | Lua callback
 f         →                      | [F]ormat buffer                | Lua callback
 bd        → :bw!<CR>             | Delete Buffer                  | Vim script
 bc        → :bd!<CR>             | Force Close Buffer             | Vim script
 md        → :MarkdownPreviewToggle<CR> | Markdown Preview               | Vim script
 q         →                      | Open diagnostic [Q]uickfix list | Lua callback
%          → <Plug>(MatchitNormalForward) | no description                 | Vim script
&          → :&&<CR>              | :help &-default                | Vim script
-          → <Cmd>Oil<CR>         | Open parent directory          | Vim script
U          → <C-R>                | no description                 | Vim script
Y          → y$                   | :help Y-default                | Vim script
[%         → <Plug>(MatchitNormalMultiBackward) | no description                 | Vim script
[          →                      | Add empty line above cursor    | Lua callback
[B         →                      | :brewind                       | Lua callback
[b         →                      | :bprevious                     | Lua callback
[<C-T>     →                      |  :ptprevious                   | Lua callback
[T         →                      | :trewind                       | Lua callback
[t         →                      | :tprevious                     | Lua callback
[A         →                      | :rewind                        | Lua callback
[a         →                      | :previous                      | Lua callback
[<C-L>     →                      | :lpfile                        | Lua callback
[L         →                      | :lrewind                       | Lua callback
[l         →                      | :lprevious                     | Lua callback
[<C-Q>     →                      | :cpfile                        | Lua callback
[Q         →                      | :crewind                       | Lua callback
[q         →                      | :cprevious                     | Lua callback
[D         →                      | Jump to the first diagnostic in the current buffer | Lua callback
[d         →                      | Jump to the previous diagnostic in the current buffer | Lua callback
]%         → <Plug>(MatchitNormalMultiForward) | no description                 | Vim script
]          →                      | Add empty line below cursor    | Lua callback
]B         →                      | :blast                         | Lua callback
]b         →                      | :bnext                         | Lua callback
]<C-T>     →                      | :ptnext                        | Lua callback
]T         →                      | :tlast                         | Lua callback
]t         →                      | :tnext                         | Lua callback
]A         →                      | :last                          | Lua callback
]a         →                      | :next                          | Lua callback
]<C-L>     →                      | :lnfile                        | Lua callback
]L         →                      | :llast                         | Lua callback
]l         →                      | :lnext                         | Lua callback
]<C-Q>     →                      | :cnfile                        | Lua callback
]Q         →                      | :clast                         | Lua callback
]q         →                      | :cnext                         | Lua callback
]D         →                      | Jump to the last diagnostic in the current buffer | Lua callback
]d         →                      | Jump to the next diagnostic in the current buffer | Lua callback
g%         → <Plug>(MatchitNormalBackward) | no description                 | Vim script
gcA        →                      | Comment insert end of line     | Lua callback
gcO        →                      | Comment insert above           | Lua callback
gco        →                      | Comment insert below           | Lua callback
gO         →                      | vim.lsp.buf.document_symbol()  | Lua callback
gri        →                      | vim.lsp.buf.implementation()   | Lua callback
grr        →                      | vim.lsp.buf.references()       | Lua callback
gra        →                      | vim.lsp.buf.code_action()      | Lua callback
grn        →                      | vim.lsp.buf.rename()           | Lua callback
gcc        →                      | Toggle comment line            | Lua callback
gc         →                      | Toggle comment                 | Lua callback
gx         →                      | Opens filepath or URI under cursor with the system handler (file explorer, web browser, …) | Lua callback
shn        →                      | Highlight next surrounding     | Lua callback
sFn        →                      | Find next left surrounding     | Lua callback
sfn        →                      | Find next right surrounding    | Lua callback
shl        →                      | Highlight previous surrounding | Lua callback
sFl        →                      | Find previous left surrounding | Lua callback
sfl        →                      | Find previous right surrounding | Lua callback
sn         →                      | Update `MiniSurround.config.n_lines` | Lua callback
sh         →                      | Highlight surrounding          | Lua callback
sF         →                      | Find left surrounding          | Lua callback
sf         →                      | Find right surrounding         | Lua callback
<Plug>(MatchitNormalMultiForward) → :<C-U>call matchit#MultiMatch("W",  "n")<CR> | no description                 | Vim script
<Plug>(MatchitNormalMultiBackward) → :<C-U>call matchit#MultiMatch("bW", "n")<CR> | no description                 | Vim script
<Plug>(MatchitNormalBackward) → :<C-U>call matchit#Match_wrapper('',0,'n')<CR> | no description                 | Vim script
<Plug>(MatchitNormalForward) → :<C-U>call matchit#Match_wrapper('',1,'n')<CR> | no description                 | Vim script
<Plug>(comment_toggle_blockwise_count) →                      | Comment toggle blockwise with count | Lua callback
<Plug>(comment_toggle_linewise_count) →                      | Comment toggle linewise with count | Lua callback
<Plug>(comment_toggle_blockwise_current) →                      | Comment toggle current block   | Lua callback
<Plug>(comment_toggle_linewise_current) →                      | Comment toggle current line    | Lua callback
<Plug>(comment_toggle_blockwise) →                      | Comment toggle blockwise       | Lua callback
<Plug>(comment_toggle_linewise) →                      | Comment toggle linewise        | Lua callback
<Plug>PlenaryTestFile → :lua require('plenary.test_harness').test_file(vim.fn.expand("%:p"))<CR> | no description                 | Vim script
<S-CR>     → m`O<Esc>``           | no description                 | Vim script
<C-K>      → <C-W><C-K>           | Move focus to the upper window | Vim script
<C-J>      → <C-W><NL>            | Move focus to the lower window | Vim script
<C-H>      → <C-W><C-H>           | Move focus to the left window  | Vim script
<C-W><C-D> → <C-W>d               | Show diagnostics under the cursor | Vim script
<C-W>d     →                      | Show diagnostics under the cursor | Lua callback
<C-L>      → <C-W><C-L>           | Move focus to the right window | Vim script

===== V MODE =====
<Tab>      →                      | vim.snippet.jump if active, otherwise <Tab> | Lua callback
 cb        → <Plug>(comment_toggle_blockwise_visual) | Comment toggle blockwise (visual) | Vim script
 cc        → <Plug>(comment_toggle_linewise_visual) | Comment toggle linewise (visual) | Vim script
 ra        → :<C-U>lua MiniSurround.add('visual')<CR> | Add surrounding to selection   | Vim script
 f         →                      | [F]ormat buffer                | Lua callback
#          →                      | :help v_#-default              | Lua callback
%          → <Plug>(MatchitVisualForward) | no description                 | Vim script
*          →                      | :help v_star-default           | Lua callback
@          → mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@' | :help v_@-default              | Vim script
J          → :m '>+1<CR>gv=gv     | no description                 | Vim script
K          → :m '<lt>-2<CR>gv=gv  | no description                 | Vim script
Q          → mode() ==# 'V' ? ':normal! @<C-R>=reg_recorded()<CR><CR>' : 'Q' | :help v_Q-default              | Vim script
[%         → <Plug>(MatchitVisualMultiBackward) | no description                 | Vim script
]%         → <Plug>(MatchitVisualMultiForward) | no description                 | Vim script
a%         → <Plug>(MatchitVisualTextObject) | no description                 | Vim script
g%         → <Plug>(MatchitVisualBackward) | no description                 | Vim script
gra        →                      | vim.lsp.buf.code_action()      | Lua callback
gc         →                      | Toggle comment                 | Lua callback
gx         →                      | Opens filepath or URI under cursor with the system handler (file explorer, web browser, …) | Lua callback
<Plug>(MatchitVisualTextObject) → <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward) | no description                 | Vim script
<Plug>(MatchitVisualMultiForward) → :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv`` | no description                 | Vim script
<Plug>(MatchitVisualMultiBackward) → :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv`` | no description                 | Vim script
<Plug>(MatchitVisualBackward) → :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv`` | no description                 | Vim script
<Plug>(MatchitVisualForward) → :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") | exe ":normal! m'" | endif<CR>gv`` | no description                 | Vim script
<Plug>(comment_toggle_blockwise_visual) → <Esc><Cmd>lua require("Comment.api").locked("toggle.blockwise")(vim.fn.visualmode())<CR> | Comment toggle blockwise (visual) | Vim script
<Plug>(comment_toggle_linewise_visual) → <Esc><Cmd>lua require("Comment.api").locked("toggle.linewise")(vim.fn.visualmode())<CR> | Comment toggle linewise (visual) | Vim script
<S-Tab>    →                      | vim.snippet.jump if active, otherwise <S-Tab> | Lua callback
<C-S>      →                      | vim.lsp.buf.signature_help()   | Lua callback

===== I MODE =====
<C-X>      →                      | no description                 | Lua callback
<C-,>      →                      | no description                 | Lua callback
<C-;>      →                      | no description                 | Lua callback
<C-Space>  →                      | no description                 | Lua callback
<C-L>      → codeium#AcceptNextLine() | no description                 | Vim script
<C-K>      → codeium#AcceptNextWord() | no description                 | Vim script
<M-Bslash> → <Plug>(codeium-complete) | no description                 | Vim script
<M-[>      → <Plug>(codeium-previous) | no description                 | Vim script
<M-]>      → <Plug>(codeium-next-or-complete) | no description                 | Vim script
<C-]>      → codeium#Clear() . "\<C-]>" | no description                 | Vim script
<Plug>(codeium-complete) → <Cmd>call codeium#Complete()<CR> | no description                 | Vim script
<Plug>(codeium-previous) → <Cmd>call codeium#CycleCompletions(-1)<CR> | no description                 | Vim script
<Plug>(codeium-next-or-complete) → <Cmd>call codeium#CycleOrComplete()<CR> | no description                 | Vim script
<Plug>(codeium-next) → <Cmd>call codeium#CycleCompletions(1)<CR> | no description                 | Vim script
<Plug>(codeium-dismiss) → <Cmd>call codeium#Clear()<CR> | no description                 | Vim script
<S-Tab>    →                      | vim.snippet.jump if active, otherwise <S-Tab> | Lua callback
<C-S>      →                      | vim.lsp.buf.signature_help()   | Lua callback
<C-W>      → <C-G>u<C-W>          | :help i_CTRL-W-default         | Vim script
<C-U>      → <C-G>u<C-U>          | :help i_CTRL-U-default         | Vim script
оо       → <Esc>                | no description                 | Vim script
<Tab>      →                      | vim.snippet.jump if active, otherwise <Tab> | Lua callback
jj         → <Esc>                | no description                 | Vim script

===== X MODE =====
 cb        → <Plug>(comment_toggle_blockwise_visual) | Comment toggle blockwise (visual) | Vim script
 cc        → <Plug>(comment_toggle_linewise_visual) | Comment toggle linewise (visual) | Vim script
 ra        → :<C-U>lua MiniSurround.add('visual')<CR> | Add surrounding to selection   | Vim script
 f         →                      | [F]ormat buffer                | Lua callback
#          →                      | :help v_#-default              | Lua callback
%          → <Plug>(MatchitVisualForward) | no description                 | Vim script
*          →                      | :help v_star-default           | Lua callback
@          → mode() ==# 'V' ? ':normal! @'.getcharstr().'<CR>' : '@' | :help v_@-default              | Vim script
J          → :m '>+1<CR>gv=gv     | no description                 | Vim script
K          → :m '<lt>-2<CR>gv=gv  | no description                 | Vim script
Q          → mode() ==# 'V' ? ':normal! @<C-R>=reg_recorded()<CR><CR>' : 'Q' | :help v_Q-default              | Vim script
[%         → <Plug>(MatchitVisualMultiBackward) | no description                 | Vim script
]%         → <Plug>(MatchitVisualMultiForward) | no description                 | Vim script
a%         → <Plug>(MatchitVisualTextObject) | no description                 | Vim script
g%         → <Plug>(MatchitVisualBackward) | no description                 | Vim script
gra        →                      | vim.lsp.buf.code_action()      | Lua callback
gc         →                      | Toggle comment                 | Lua callback
gx         →                      | Opens filepath or URI under cursor with the system handler (file explorer, web browser, …) | Lua callback
<Plug>(MatchitVisualTextObject) → <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward) | no description                 | Vim script
<Plug>(MatchitVisualMultiForward) → :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv`` | no description                 | Vim script
<Plug>(MatchitVisualMultiBackward) → :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv`` | no description                 | Vim script
<Plug>(MatchitVisualBackward) → :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv`` | no description                 | Vim script
<Plug>(MatchitVisualForward) → :<C-U>call matchit#Match_wrapper('',1,'v')<CR>:if col("''") != col("$") | exe ":normal! m'" | endif<CR>gv`` | no description                 | Vim script
<Plug>(comment_toggle_blockwise_visual) → <Esc><Cmd>lua require("Comment.api").locked("toggle.blockwise")(vim.fn.visualmode())<CR> | Comment toggle blockwise (visual) | Vim script
<Plug>(comment_toggle_linewise_visual) → <Esc><Cmd>lua require("Comment.api").locked("toggle.linewise")(vim.fn.visualmode())<CR> | Comment toggle linewise (visual) | Vim script

===== S MODE =====
<Tab>      →                      | vim.snippet.jump if active, otherwise <Tab> | Lua callback
 f         →                      | [F]ormat buffer                | Lua callback
J          → :m '>+1<CR>gv=gv     | no description                 | Vim script
K          → :m '<lt>-2<CR>gv=gv  | no description                 | Vim script
<S-Tab>    →                      | vim.snippet.jump if active, otherwise <S-Tab> | Lua callback
<C-S>      →                      | vim.lsp.buf.signature_help()   | Lua callback

===== O MODE =====
 f         →                      | [F]ormat buffer                | Lua callback
%          → <Plug>(MatchitOperationForward) | no description                 | Vim script
[%         → <Plug>(MatchitOperationMultiBackward) | no description                 | Vim script
]%         → <Plug>(MatchitOperationMultiForward) | no description                 | Vim script
g%         → <Plug>(MatchitOperationBackward) | no description                 | Vim script
gc         →                      | Comment textobject             | Lua callback
<Plug>(MatchitOperationMultiForward) → :<C-U>call matchit#MultiMatch("W",  "o")<CR> | no description                 | Vim script
<Plug>(MatchitOperationMultiBackward) → :<C-U>call matchit#MultiMatch("bW", "o")<CR> | no description                 | Vim script
<Plug>(MatchitOperationBackward) → :<C-U>call matchit#Match_wrapper('',0,'o')<CR> | no description                 | Vim script
<Plug>(MatchitOperationForward) → :<C-U>call matchit#Match_wrapper('',1,'o')<CR> | no description                 | Vim script

===== T MODE =====
<Esc><Esc> → <C-\><C-N>           | Exit terminal mode             | Vim script

===== C MODE =====
<Plug>(TelescopeFuzzyCommandSearch) → <C-\>e "lua require('telescope.builtin').command_history { default_text = [=[" . escape(getcmdline(), '"') . "]=] }"<CR><CR> | no description                 | Vim script
